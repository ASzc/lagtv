# Install

## Arch Linux

Install general dependencies

    # pacman -S git base-devel

Install nokogiri dependencies

    # pacman -S libxml2 libxslt

Install pg dependencies

    # pacman -S postgresql-libs

Install a runtime for execjs

    # pacman -S nodejs

Set up user and ruby environment

    # useradd -m lagtv
    # su - lagtv
    $ curl -L get.rvm.io | bash -s stable
    $ source ~/.rvm/scripts/rvm
    $ rvm install ruby-2.0.0-p0
    $ rvm use ruby-2.0.0-p0
    $ rvm gemset create lagtv
    $ rvm gemset use lagtv
    $ gem install bundler

Clone repo, nuke old version files, copy example configs

    $ git clone git://github.com/andypike/lagtv.git
    $ echo -e 'rvm use ruby-2.0.0-p0\nrvm gemset use lagtv' >| lagtv/.rvmrc
    $ rm lagtv/Gemfile.lock
    $ cd lagtv
      yes
    $ cd config
    $ for conf_file in *example*; do cp $conf_file $(echo "$conf_file" | sed -e 's/.example//'); done
    $ cd ..

Refresh secrets with some non-production quality random data

    $ alias rnd='cat /dev/urandom | tr -dc A-Za-z0-9_ | head -c100'
    $ for key in is_human_salt secret_token; do sed -i -e "s/^$key:.*$/$key: \"$(rnd)\" /" config/application.yml; done

Get dependencies, install dependencies

    $ bundle
    $ bundle install
    $ ^D

Set up postgresql and add db bootstrap user

    # pacman -S postgresql
    # systemd-tmpfiles --create postgresql.conf
    # mkdir /var/lib/postgres/data
    # chown -c -R postgres:postgres /var/lib/postgres
    # su - postgres
    $ initdb -D '/var/lib/postgres/data'
    $ ^D
    # systemctl start postgresql
    # systemctl enable postgresql
    # su - postgres
    $ psql -d postgres
    > create role lagtv login createdb;
    > ^D
    $ ^D

Set up redis (for use by resque)

    # pacman -S redis
    # systemctl start redis
    # systemctl enable redis

Init databases and execute the server

    # su - lagtv
    $ cd lagtv
    $ rake db:setup

Registration will break if there are no users in the db due to use of .save over .save! in code, fix this

    $ sed -i -e 's/@user\.save$/@user.save!/' app/controllers/users_controller.rb

Execute the resque worker and the rails server

    $ QUEUE=group_email rake environment resque:work &
    $ rails s -d

Check port 3000 of the host computer via HTTP, example: http://localhost:3000/
Most distros will require iptables (firewall) configuration changes to allow remote access.

Bootstrap an admin user after registering a normal user:

    # su - postgres
    $ psql -d lagtv_development
    > select id,name,role,email from users;
    > update users set role = 'admin' where email = 'test@example.com';
    > ^D
    $ ^D

More psql: http://www.postgresql.org/docs/9.2/static/app-psql.html

More SQL: http://www.postgresql.org/docs/9.2/static/sql-commands.html


## General

1. Install Postgres and start the service

        $ brew install postgresql

2. Install RVM

        $ curl -L get.rvm.io | bash -s stable

3. Create a gemset called lagtv and use it

        $ rvm gemset create lagtv
        $ rvm gemset use lagtv

4. Install bundler

        $ gem install bundler

5. Fork the official repo and create a feature branch

        $ git checkout -b my_feature_branch

6. Create the db user

        $ psql -d postgres
        postgres=# create role lagtv login createdb;
        postgres=# \q

   If you get "psql: could not connect to server: Permission denied" error on Lion:

   * Open /etc/paths and move /usr/local/bin to the top and save.
   * Restart Terminal

   If you get error about not sending pass called fe_sendauth: No Password Supplier

   * You need to configure your pg_hba.conf file to allow local connections to connect without password. Info on how to setup the file here: http://archives.postgresql.org/pgadmin-support/2007-02/msg00085.php

7. Copy the config file

        $ cp config/database.example.yml config/database.yml
        $ cp config/application.example.yml config/application.yml
        $ cp config/newrelic.example.yml config/newrelic.yml

8. Create databases

        $ rake db:create:all

9. Run the rails server

        $ rails s

10. Check the site is running in your browser http://localhost:3000/

11. Start redis:

        $ redis-server /usr/local/etc/redis.conf

12. Start resque worker:

        $ QUEUE=group_email rake environment resque:work

## To Deploy

    $ cap uat deploy:all
    => deploys official master to uat

    $ cap live deploy:all
    => deploys official master to live

## Removing RVM

    $ rvm implode

## Useful Commands:

Restart nginx:

    $ /etc/init.d/nginx restart

Restart unicorn:

    $ /etc/init.d/unicorn_lagtv restart

Interact with the dev db locally:

    $ psql lagtv_development lagtv

Backup DB:

    $ pg_dump -U lagtv lagtv_production -h localhost -f backups/pre-1.0.1-upgrade.sql
    $ tar -cvzpf backups/pre-1.0.1-db-upgrade.tar.gz backups/pre-1.0.1-upgrade.sql
    $ rm backups/pre-1.0.1-upgrade.sql
    $ scp root@198.58.101.4:/home/apps/lagtv/shared/backups/pre-1.1.0-db-upgrade.tar.gz ~/

Restore DB Locally:

    $ rake db:drop
    $ rake db:create
    $ psql lagtv_development lagtv < backups/pre-1.1.0-upgrade.sql

Installing imagemagick on ubuntu: $ apt-get install libmagickwand-dev imagemagick

## Useful links:
Email forwarding for postfix: http://www.cyberciti.biz/faq/linux-unix-bsd-postfix-forward-email-to-another-account/

How to generate a CSR for Nginx using OpenSSL: http://www.digicert.com/csr-creation-nginx.htm

Installing a cert in nginx: http://www.digicert.com/ssl-certificate-installation-nginx.htm

Self signed cert with nginx: http://library.linode.com/web-servers/nginx/configuration/ssl

## Running specs

    $ bundle exec guard

or if you are using Sublime Text 2, install 

* The rspec runner https://github.com/maltize/sublime-text-2-ruby-tests 
* Spin: https://github.com/jstorimer/spin
  Then start up spin from your project folder with $ spin serve --push-results
  Then inside sublime use Command-Shift-R to run the single test where the cursor is or Command-Shift-T to run all tests in the current file.

## Info

On 24th Feb I ran the following on live to clean up the replays list due to the new sc2 patch braking replays and Adam asked the list to be cleaned up:

* => update replays set status = 'rejected' where id < 6800 and id > 6154 and status = 'new';
